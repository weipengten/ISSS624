---
title: Hands on 2b -"Global Measures of Spatial Autocorrelation"
date-modified: "last-modified"
format: html
---

## **3.1 Overview**

In this hands-on exercise, you will learn how to compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using **spdep** package. By the end to this hands-on exercise, you will be able to:

-   import geospatial data using appropriate function(s) of **sf** package,

-   import csv file using appropriate function of **readr** package,

-   perform relational join using appropriate join function of **dplyr** package,

-   compute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of **spdep** package,

    -   plot Moran scatterplot,

    -   compute and plot spatial correlogram using appropriate function of **spdep** package.

-   compute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions **spdep** package;

-   compute Getis-Ord's Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of **spdep** package; and

-   to visualise the analysis output by using **tmap** package.

## **3.2 Getting Started**

### **3.2.1 The analytical question**

In spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is **No**. Then, our next question will be "is there sign of spatial clustering?". And, if the answer for this question is yes, then our next question will be "where are these clusters?"

In this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.(https://en.wikipedia.org/wiki/Hunan)

### **3.2.2 The Study Area and Data**

Two data sets will be used in this hands-on exercise, they are:

-   Hunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.

-   Hunan_2012.csv: This csv file contains selected Hunan's local development indicators in 2012.

### **3.2.3 Setting the Analytical Toolls**

Before we get started, we need to ensure that **spdep**, **sf**, **tmap** and **tidyverse** packages of R are currently installed in your R.

-   sf is use for importing and handling geospatial data in R,

-   tidyverse is mainly use for wrangling attribute data in R,

-   spdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and

-   tmap will be used to prepare cartographic quality chropleth map.

The code chunk below is used to perform the following tasks:

-   creating a package list containing the necessary R packages,

-   checking if the R packages in the package list have been installed in R,

    -   if they have yet to be installed, RStudio will installed the missing packages,

-   launching the packages into R environment.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

## **3.3 Getting the Data Into R Environment**

In this section, you will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.

### **3.3.1 Import shapefile into r environment**

The code chunk below uses [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package to import Hunan shapefile into R. The imported shapefile will be **simple features** Object of **sf**.

```{r}
hunan <- st_read(dsn = "data/geospatial", layer = "Hunan")
```

### **3.3.2 Import csv file into r environment**

Next, we will import *Hunan_2012.csv* into R by using *read_csv()* of **readr** package. The output is R data frame class.

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

### **3.3.3 Performing relational join**

The code chunk below will be used to update the attribute table of *hunan*'s SpatialPolygonsDataFrame with the attribute fields of *hunan2012* dataframe. This is performed by using *left_join()* of **dplyr** package.

```{r}
hunan <- left_join(hunan,hunan2012) %>%   select(1:4, 7, 15)
```

### **3.3.4 Visualising Regional Development Indicator**

Now, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using *qtm()* of **tmap** package.

```{r}
equal <- tm_shape(hunan) +   
  tm_fill("GDPPC", n = 5, style = "equal") +   
  tm_borders(alpha = 0.5) +   
  tm_layout(main.title = "Equal interval classification")  
quantile <- tm_shape(hunan) +   
  tm_fill("GDPPC", n = 5, style = "quantile") +   
  tm_borders(alpha = 0.5) +   
  tm_layout(main.title = "Equal quantile classification")  
tmap_arrange(equal, quantile, asp=1, ncol=2)
```

## **3.4 Global Spatial Autocorrelation**

In this section, you will learn how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.

### **3.4.1 Computing Contiguity Spatial Weights**

Before we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.

In the code chunk below, [*poly2nb()*](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a "queen" argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don't specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.

More specifically, the code chunk below is used to compute Queen contiguity weight matrix.

```{r}
wm_q <- poly2nb(hunan, queen=TRUE) 
summary(wm_q)
```

The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.

### **3.4.2 Row-standardised weights matrix**

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style="W"). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors' values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we'll stick with the style="W" option for simplicity's sake but note that other more robust options are available, notably style="B".

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE) 
rswm_q
```

The input of *nb2listw()* must be an object of class **nb**. The syntax of the function has two major arguments, namely style and zero.poly.

-   *style* can take values "W", "B", "C", "U", "minmax" and "S". B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).

-   If *zero policy* is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %\*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.

### **3.4.3 Global Spatial Autocorrelation: Moran's I**

In this section, you will learn how to perform Moran's I statistics testing by using [*moran.test()*](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**.

### **3.4.4 Maron's I test**

The code chunk below performs Moran's I statistical testing using [*moran.test()*](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**.

```{r}
moran.test(hunan$GDPPC,listw=rswm_q, zero.policy = TRUE,na.action=na.omit)
```

> Question: What statistical conclusion can you draw from the output above? In summary there is a statistically significant positive spatial autocorrelation in the GDP per capita variable among the regions, meaning that regions with similar economic characteristics are spatially clustered.

#### 3.4.4.1 Computing Monte Carlo Moran's I

The code chunk below performs permutation test for Moran's I statistic by using [*moran.mc()*](https://r-spatial.github.io/spdep/reference/moran.mc.html) of **spdep**. A total of 1000 simulation will be performed.

```{r}
set.seed(1234) 
bperm= moran.mc(hunan$GDPPC, listw=rswm_q, nsim=999, zero.policy= TRUE,na.action=na.omit) 
bperm
```

> Question: What statistical conclustion can you draw fro mthe output above?

> statistic = 0.30075 is more than 0 => Clustered, observations tend to be similar
In summary, the Monte Carlo simulation provides robust evidence that the spatial autocorrelation observed in the GDP per capita variable is unlikely to be due to random chance, supporting the conclusion drawn from the Moran's I test.

#### 3.4.4.2 Visualising Monte Carlo Moran's I

It is always a good practice for us the examine the simulated Moran's I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.

In the code chunk below [*hist()*](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/hist) and [*abline()*](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/abline) of R Graphics are used.

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res,freq=TRUE,  breaks=20, xlab="Simulated Moran's I") 
abline(v=0, col="red") 
```

> Question: What statistical observation can you draw from the output above?


> The histogram of simulated Moran's I values from Monte Carlo simulations represents the distribution of Moran's I values under the null hypothesis (spatial randomness).
The histogram is slightly skewed to the right which confirms the result of Maron's I test ([Moran I statistic of 0.300749970, there is some clustering of similar value)]{.underline}


> Challenge: Instead of using Base Graph to plot the values, plot the values by using ggplot2 package.

```{r}
library(ggplot2)

# Extract simulated Moran's I values excluding the observed value
simulated_values <- bperm$res[1:999]

# Create a ggplot histogram
ggplot(data = data.frame(Moran_I = bperm$res), aes(x = Moran_I)) +
  geom_histogram(binwidth = 0.02, fill = "blue", color = "black", alpha = 0.7) +
  labs(title = "Histogram of Simulated Moran's I",
       x = "Simulated Moran's I",
       y = "Frequency") +
  theme_minimal()

```

### **3.4.5 Global Spatial Autocorrelation: Geary's**

In this section, you will learn how to perform Geary's c statistics testing by using appropriate functions of **spdep** package.

#### 3.4.5.1 Geary's C test

The code chunk below performs Geary's C test for spatial autocorrelation by using [*geary.test()*](https://r-spatial.github.io/spdep/reference/geary.test.html) of **spdep**.

```{r}
geary.test(hunan$GDPPC, listw=rswm_q)
```

> Question: What statistical conclusion can you draw from the output above?


>The p-value is very small (0.0001526), indicating that the observed spatial pattern in GDPPC is statistically significant.
The Geary C statistic being less than 1 suggests positive spatial autocorrelation, signifying clustering
The observed value of Geary's C is significantly lower than the expected value under spatial randomness, supporting the conclusion of positive spatial autocorrelation.

#### 3.4.5.2 Computing Monte Carlo Geary's C


The code chunk below performs permutation test for Geary's C statistic by using [*geary.mc()*](https://r-spatial.github.io/spdep/reference/geary.mc.html) of **spdep**.

```{r}
set.seed(1234) 
bperm=geary.mc(hunan$GDPPC, listw=rswm_q,nsim=999) 
bperm
```

> Question: What statistical conclusion can you draw from the output above?

>The p-value of 0.001 is less than the conventional significance level of 0.05, indicating that the observed Geary's C statistic is statistically significant.
The alternative hypothesis is that the expectation is greater than the observed statistic, suggesting a positive spatial autocorrelation.
The observed Geary's C value of 0.69072 is consistent with positive spatial autocorrelation, and the small p-value reinforces the evidence against the null hypothesis of spatial randomness.
In summary, the statistical evidence from the Monte Carlo simulation supports the conclusion that there is a significant positive spatial autocorrelation in the distribution of GDPPC values in the study area.

#### 3.4.5.3 Visualising the Monte Carlo Geary's C

Next, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Geary c") 
abline(v=1, col="red") 
```

> Question: What statistical observation can you draw from the output?

## **3.5 Spatial Correlogram**

Spatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran's I or Geary's c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.

### **3.5.1 Compute Moran's I correlogram**

In the code chunk below, [*sp.correlogram()*](https://r-spatial.github.io/spdep/reference/sp.correlogram.html) of **spdep** package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran's I. The **plot()** of base Graph is then used to plot the output.

```{r}
MI_corr <- 
  sp.correlogram(wm_q,
                hunan$GDPPC,                            
                order=6,                           
                method="I",                           
                style="W") 
plot(MI_corr)
```

By plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.

```{r}
print(MI_corr)
```

> Question: What statistical observation can you draw from the plot above?

> Moran's I are positive and statistically significant up till the 3rd lag. 5th and 6th lag are negative and statistically significant.

### **3.5.2 Compute Geary's C correlogram and plot**

In the code chunk below, *sp.correlogram()* of **spdep** package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary's C. The **plot()** of base Graph is then used to plot the output.

```{r}
GC_corr <- sp.correlogram(wm_q,                            
                          hunan$GDPPC,                            
                          order=6,                            
                          method="C",                            
                          style="W") 
plot(GC_corr)
```

Similar to the previous step, we will print out the analysis report by using the code chunk below.

```{r}
print(GC_corr)
```
