---
title: "Take Home Exercise (PEERS) - Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods"
date-modified: "last-modified"
format: html
execute: 
  echo: true
  eval: true
  warning: false

highlight-style: github
code:
  lineNumbers: true
  wrapLines: true
  wrap: true
  style: "color: black; background-color: #f0f0f0;"
output:
  quarto::quarto_html:
    includes:
      after_body: styles.css
---

## Overview

## Objectives

In this take-home exercise you are required to regionalize Nigeria by using, but not limited to the following measures:

-   Total number of functional water points in LGA

-   Total number of nonfunctional water points in LGA

-   Percentage of functional water points

-   Percentage of non-functional water points

-   Percentage of main water point technology (i.e. Hand Pump)

-   Percentage of usage capacity (i.e. \< 1000, \>=1000)

-   Percentage of rural water points

## **The Data**

### **Aspatial data**

For the purpose of this assignment, data from [WPdx Global Data Repositories](https://www.waterpointdata.org/access-data/) will be used. There are two versions of the data. They are: WPdx-Basic and WPdx+. You are required to use WPdx+ data set.

### **Geospatial data**

Nigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data will be used in this take-home exercise. The data can be downloaded either from The [Humanitarian Data Exchange](https://data.humdata.org/) portal or [geoBoundaries](https://www.geoboundaries.org/).

## **The Task**

The specific tasks of this take-home exercise are as follows:

-   Using appropriate sf method, import the shapefile into R and save it in a simple feature data frame format. Note that there are three Projected Coordinate Systems of Nigeria, they are: EPSG: 26391, 26392, and 26303. You can use any one of them.

-   Using appropriate tidyr and dplyr methods, derive the proportion of functional and non-functional water point at LGA level (i.e. ADM2).

-   Combining the geospatial and aspatial data frame into simple feature data frame.

-   Delineating water point measures functional regions by using conventional hierarchical clustering.

-   Delineating water point measures functional regions by using spatially constrained clustering algorithms.

### **Thematic Mapping**

-   Plot to show the water points measures derived by using appropriate statistical graphics and choropleth mapping technique.

### **Analytical Mapping**

-   Plot functional regions delineated by using both non-spatially constrained and spatially constrained clustering algorithms.

### Installing and loading R packages

Before we get started, it is important for us to install the necessary R packages into R and launch these R packages into R environment.

The R packages needed for this exercise are as follows:

-   Spatial data handling

    -   **sf** and **sfdep**

-   Attribute data handling

    -   **tidyverse** (which includes a few essential packages like ggplot2, dplyr, tidyr, readr, purrr, tibble, stringr) and **GGally**

-   Choropleth mapping

    -   **tmap**

-   Multivariate data visualisation and analysis

    -   **coorplot**, **ggpubr**, **heatmaply**, **palmerpenguins**

-   Cluster analysis

    -   **cluster**, **ClustGeo**, **factoextra**

The code chunks below installs and launches these R packages into R environment.

```{r}
pacman::p_load(sf, sfdep, tmap, tidyverse, tmap, ClustGeo, ggpubr, cluster, factoextra, heatmaply,
               corrplot, GGally, palmerpenguins)
```

## 1. Importing Data

We will import the data as a first step before proceeding with data cleaning, data wrangling and data exploration for the following:

-   **wpdx_ngaa**, a csv file with the necessary Water Point data that we are interested in,

-   **nga**, a multipolygon feature layer ESRI shapefile format

::: panel-tabset
## Aspatial Data

### 1.1.1 Reading the Data

**wpdx_nga** is the data that contains the attributes of water points in Nigera that we are interested in, we can import the data simply by using the read_csv function from tidyverse package and output it as a tibble dataframe.

```{r}
wpdx_nga <- read_csv("data/aspatial/eqje-vguj.csv")
```

### 1.1.2 Additional Steps

However, it also has spatial attributes. Hence, we performed the following steps:

1.  In order to derive its spatial features represented in the **new_georeferenced_column\_**, we use the **st_as_sfc()** function of sf package to derive a new field called **Geometry**.

2.  Next, **st_sf()** will be used to convert the tibble data frame into sf data frame geo-referenced to Projected Coordinate Systems of Nigeria using EPSG: 26391.

3.  We save our processed data into .rds data format files using the **write_rds()** of **readr** package. The output file is saved in *rds* sub-folder. We do this to reduce the loading time and more importantly, we can avoid uploading the large raw files onto GitHub.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
wpdx_nga$Geometry = st_as_sfc(wpdx_nga$new_georeferenced_column_)
wpdx_nga <- st_sf(wpdx_nga, crs=26391)
st_geometry(wpdx_nga)
write_rds(wpdx_nga, "data/rds/wpdx_nga.rds")
weekday_morning_peak <- read_rds("data/rds/wpdx_nga.rds")
```

The Geometry column we derived earlier is confirmed to be of POINT type with XY dimension, without a third dimension.

## Geospatial Data

### 1.2.1 Reading the Data

**nga** is a geospatial dataset.

We will be using the **st_read** function of the sf package. The data is then geo-referenced to Projected Coordinate Systems of Nigeria (EPSG: 26391)

```{r}
#| code-fold: true
#| code-summary: "Show the code"
nga <- st_read(dsn = "data/geospatial",
               layer = "geoBoundaries-NGA-ADM2")%>%
  st_transform(crs = 26391)%>%
  select(shapeName)


write_rds(nga, "data/rds/nga.rds")
nga <- read_rds("data/rds/nga.rds")
```

It is checked that the data have been transformed properly from output below:

```{r}
st_geometry(nga)
st_crs(nga)
```
:::

## 2. Data Cleaning

### 2.1 Dealing with Duplicates

::: panel-tabset

## Water Point Data

### 2.1.1 Checking for entire duplicate rows.

> Passes first duplicate check.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
duplicate <- wpdx_nga %>%
group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
duplicate
```

### 2.1.2 Checking for dupilcate **row_id** ...

> Passes second duplicate check.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
duplicates <- nga[duplicated(wpdx_nga$row_id), ]

# Check if there are any duplicates
if (nrow(duplicates) > 0) {
  cat("Duplicate values found in the row_id column.\n")
  print(duplicates)
} else {
  cat("No duplicate values found in the row_id column.\n")
}

```

### 2.1.3 Checking possible LGA column ...

Let's check into unqiue **clean_adm2** values, we have a count of **205** unique LGA boundaries which seems to contradict what we have found in the dataset derived from [geoBoundaries](https://www.geoboundaries.org/) where we found **769** unique LGA boundaries

While **clean_adm2** seems to also provide information on LGA boundaries, it seems largely different from that the dataset which we are advised to derived LGA data from. To play safe, we **WILL NOT\* rely on** clean_adm2\*\* but rather the LGA data from geoBoundaries in **nga** dataframe

Further more there are many NA values for this column.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
unique_values_1 <- unique(wpdx_nga$clean_adm2)
length(unique_values_1)
```

## GeoBoundaries-ADM2 Data

LGA which we will be using as our dimension should not have any duplicates

### 2.1.4 Checking for entire duplicate rows.

> Passes first duplicate check.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
duplicate <- nga %>%
group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
duplicate
```

### 2.1.5 Checking for dupilcate LGA comes up with **5** duplicates.

Checking for dupilcate LGA names in the **shapeName** column comes up with **5** duplicates. They are Surulere, Ifelodun, Irepodun, Bassa, Obi.

> Fails second duplicate check.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
duplicates <- nga[duplicated(nga$shapeName),]

# Check if there are any duplicates
if (nrow(duplicates) > 0) {
  cat("Duplicate values found in the shapeName column.\n")
  print(duplicates)
} else {
  cat("No duplicate values found in the shapeName column.\n")
}

```

We remove the duplicate entries found in the list from \*\*nga\* dataframe and now there are no more duplicates.

Some peers have joined the state names with the LGA boundaries for those duplicate entries, however that might also cause an incorrect analysis later on, since that isn't exactly representatiev of LGA boundary anymore.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
nga <- nga[!duplicated(nga$shapeName), ]
duplicates <- nga[duplicated(nga$shapeName), ]
duplicates
```

### 2.1.6 Checking for unqiue LGA values in shapeName

Let's check into unqiue LGA values in shapeName

```{r}
#| code-fold: true
#| code-summary: "Show the code"
unique_values_3 <- unique(nga$shapeName)
length(unique_values_3)
```

### 2.2 Dealing with Missing Values

::: panel-tabset
## Water Point Data

To formulate the measures required for our task, a few columns are most vital to our analysis:

-   **status_clean** - status of the water points such as whether it is functional or non-functional

-   **_water_tech_category** - type of water point technology utilised

-   **is_urban** - required for us to differentiate urban and rural data points

-   **usage_cap** - determines the usage capacity category

Some other columns are also useful attributes we should consider for our analysis such as:

-    **press_score** - 

```{r eval=FALSE}
glimpse(wpdx_nga)

```

```{r eval=FALSE}
summary(wpdx_nga)


```

**status_clean** column seems to contain the information of the status of the water points - whether it is functional or non-functional. Let's check it out by looking at the possible statuses.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
unique_values_2 <- unique(wpdx_nga$status_clean)
unique_values_2
```
:::

::: panel-tabset
:::
