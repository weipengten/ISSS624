---
title: "In-Class Exercise 4 -"
date-modified: "last-modified"
format: html
execute: 
  echo: true
  eval: true
  warning: false
  
highlight-style: github
code:
  style: "color: red;"
---


. \## Getting Started


```{r}
pacman::p_load(sf, httr, tmap, tidyverse, httr2, AER, MASS, ggpubr, performance)
```


httr, httr2 is a r package, allows us to work with html packages

## Geocoding Using SLA API

Work with SLA OneMap API, Search

-   Client: Passes Request with names

-   Server: Provides Response with X,Y coordinates


```{r}
url <- "https://www.onemap.gov.sg/api/common/elastic/search"

csv <- read_csv("data/aspatial/Generalinformationofschools.csv")
postcodes <- csv$`postal_code`

found <- data.frame()
not_found <- data.frame()

for(postcode in postcodes){
  query <- list('searchVal' =postcode, 'returnGeom'='Y','getAddrDetails'='Y','pageNum'='1')
  res <- GET(url,query=query)
  
  if((content(res)$found)!=0){
  found <-rbind(found,data.frame(content(res))[4:13])
  } else{
    not_found =data.frame(postcode)
  }
}


```

```{r}
merged = merge(csv,found, by.x='postal_code', by.y='results.POSTAL',all=TRUE)
               write.csv(merged, file="data/aspatial/schools.csv")
               write.csv(not_found, file="data/aspatial/not_found.csv")
               
```

```{r}
schools <- read_csv("data/aspatial/schools.csv") %>%
  rename(latitude = "results.LATITUDE",
         longitude = "results.LONGITUDE") %>%
  bind_rows(tibble(
    postal_code = "679962",
    school_name = "ZHENGHUA SECONDARY SCHOOL",
    latitude = 1.3887,
    longitude = 103.7652
  )) %>%
  drop_na()

```

```{r}
schools_sf <- st_as_sf(schools,
                       coords =c("longitude","latitude"),
                       crs=4326) %>%
  st_transform(crs=3414)
```

```{r}
tmap_mode("view")
tm_shape(schools_sf) +
  tm_dots() +
  tm_view(set.zoom.limits = c(11, 14))

```

```{r}

mpsz <- st_read(dsn = "data/geospatial",
                   layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
mpsz
```

```{r}
mpsz$`SCHOOL_COUNT` <-lengths(
  st_intersects(
    mpsz,schools_sf))
```

```{r}
# tmap_options(check.and.fix=TRUE)
# tm_shape(mpsz) +
#   tm_polygons() +
#   tm_shape(retails_sf) +
#   tm_dots()

```

```{r}
flow_data <- read_rds("data/rds/flow_data_tidy.rds")
```

```{r}
flow_data$FlowNOINtro <- ifelse(
  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ,
  0, flow_data$MORNING_PEAK)
flow_data$offset <- ifelse(
  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ,
  0.0000001,1)



```


### **16.8.6 Origin (Production) constrained SIM**

In this section, we will fit an origin constrained SIM by using the code3 chunk below.

The general formula of Origin Constrained Spatial Interaction Model


```{r} 
# orcSIM <- glm(formula = TRIPS ~ 
#                  ORIGIN_SZ +
#                  log(SCHOOL_COUNT) +
#                  log(RETAILL_COUNT) +
#                  log(DIST)-1,
#               family = poisson(link = "log"),
#               data = inter_zonal_flow,
#               na.action = na.exclude)
# summary(orc$SIM_Poisson)


```


We can examine how the constraints hold for destinations this time.

